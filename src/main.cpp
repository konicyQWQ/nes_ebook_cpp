#include "SDL2/SDL.h"
#include "SDL_events.h"
#include "SDL_pixels.h"
#include "SDL_rect.h"
#include "SDL_render.h"
#include "SDL_scancode.h"
#include "SDL_video.h"
#include "cpu/cpu.h"
#include <chrono>
#include <exception>
#include <iostream>
#include <ostream>
#include <thread>
#include <utils/types.h>

const nes_simulator::uint8 game_code[] = {
    0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06,
    0x60, 0xa9, 0x02, 0x85, 0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85,
    0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85, 0x14, 0xa9, 0x04, 0x85,
    0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
    0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20,
    0x8d, 0x06, 0x20, 0xc3, 0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20,
    0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9, 0x77, 0xf0, 0x0d, 0xc9,
    0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
    0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9,
    0x08, 0x24, 0x02, 0xd0, 0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01,
    0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02, 0x60, 0xa9, 0x02, 0x24,
    0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
    0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01,
    0xc5, 0x11, 0xd0, 0x07, 0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60,
    0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06, 0xb5, 0x11, 0xc5, 0x11,
    0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
    0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca,
    0x10, 0xf9, 0xa5, 0x02, 0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0,
    0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9, 0x20, 0x85, 0x10, 0x90,
    0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
    0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69,
    0x20, 0x85, 0x10, 0xb0, 0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11,
    0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29, 0x1f, 0xc9, 0x1f, 0xf0,
    0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
    0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10,
    0x60, 0xa2, 0x00, 0xea, 0xea, 0xca, 0xd0, 0xfb, 0x60};

void handle_user_input(nes_simulator::cpu &cpu) {
  SDL_Event event;
  while (SDL_PollEvent(&event)) {
    switch (event.type) {
    case SDL_KEYDOWN:
      switch (event.key.keysym.scancode) {
      case SDL_SCANCODE_Q:
        exit(0);
      case SDL_SCANCODE_W:
        cpu.mem_write(0xff, 0x77);
        break;
      case SDL_SCANCODE_S:
        cpu.mem_write(0xff, 0x73);
        break;
      case SDL_SCANCODE_A:
        cpu.mem_write(0xff, 0x61);
        break;
      case SDL_SCANCODE_D:
        cpu.mem_write(0xff, 0x64);
        break;
      default:
        break;
      }
    }
  }
}

SDL_Color color(nes_simulator::uint8 data) {
  switch (data) {
  case 0:
    return SDL_Color{0, 0, 0, 0};
  default:
    return SDL_Color{255, 255, 255, 0};
  }
}

bool read_screen_state(nes_simulator::cpu &cpu, nes_simulator::uint8 *frame) {
  bool update = false;
  int frame_idx = 0;
  for (int i = 0x200; i < 0x600; i++) {
    auto c = color(cpu.mem_read(i));
    if (frame[frame_idx] != c.r || frame[frame_idx + 1] != c.g ||
        frame[frame_idx + 2] != c.b) {
      frame[frame_idx] = c.r;
      frame[frame_idx + 1] = c.g;
      frame[frame_idx + 2] = c.b;
      update = true;
    }
    frame_idx += 3;
  }
  return update;
}

int main() {
  SDL_Init(SDL_INIT_EVERYTHING);
  auto *window =
      SDL_CreateWindow("snake", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
                       320, 320, SDL_WINDOW_ALLOW_HIGHDPI);

  auto *render = SDL_CreateRenderer(window, -1, SDL_RENDERER_PRESENTVSYNC);
  SDL_RenderSetScale(render, 10, 10);

  auto *texture = SDL_CreateTexture(render, SDL_PIXELFORMAT_RGB24,
                                    SDL_TEXTUREACCESS_TARGET, 32, 32);

  SDL_ShowWindow(window);
  nes_simulator::uint8 frame[32 * 3 * 32];

  nes_simulator::cpu cpu;
  cpu.load_and_run(game_code, sizeof(game_code), [&](nes_simulator::cpu &cpu) {
    handle_user_input(cpu);
    cpu.mem_write(0xfe, rand() % 15 + 1);
    if (read_screen_state(cpu, frame)) {
      SDL_UpdateTexture(texture, nullptr, frame, 32 * 3);
      SDL_RenderCopy(render, texture, nullptr, nullptr);
      SDL_RenderPresent(render);
    }

    std::this_thread::sleep_for(std::chrono::microseconds(120));
  });

  return 0;
}
